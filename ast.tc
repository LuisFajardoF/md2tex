%option lang = "C++"
%option namespace = "Ast"

%decls %{
    #include <iostream>
    #include <vector>

    using string_t = std::string;

    namespace Ast {
        class AstNode;
        class FigureParams;

        using ElementVector = std::vector<AstNode *>;
        using StringVector = std::vector<string_t>;
        using MultipleFiguresVector = std::vector<FigureParams *>;
    }    
%}

%{
    #include "ast.h"
    #include "gen_latex.h"

    string_t headcode;
    bool latexclass_exist = false;
    bool is_numbered = false;
    bool is_reportcover = false;

    struct Package package;
    struct Preamble preamble;
%}

%node AstNode %abstract %typedef = {
    %nocreate string_t code;
}

%node Element AstNode %abstract

%node BlockElement Element = {
    ElementVector elements;
}

%node ParamsLevel1 Element = {
    ElementVector elmtsl1;
}

%node ParamsLevel2 Element = {
    ElementVector elmtsl2;
}

%node TocParams Element = {
    ElementVector params;
}

%node FigureParams Element = {
    StringVector figureParams;
}

%node MultipleFiguresParams Element = {
    MultipleFiguresVector mfv; 
}

%node MultipleFiguresLabel Element = {
    StringVector mfl;
}

%node LatexClass Element = { string_t text; }
%node Numbered Element = { string_t text; }
%node PageNumbering Element = { string_t text; }
%node Section Element = { string_t text;}
%node SubSection Element = { string_t text; }
%node SubSubSection Element = { string_t text; }
%node Paragraph Element = { string_t text; }
%node SubParagraph Element = { string_t text; }
%node PlainText Element = { string_t text; }
%node TitleParamL2 Element = { string_t text; }
%node DateParamL2 Element = { string_t text; }
%node AuthorParamL2 Element = { string_t text; }
%node InstitutionParamL2 Element = { string_t text; }
%node SubjectParamL2 Element = { string_t text; }
%node PlaceParamL2 Element = { string_t text; }
%node LogoParamL2 Element = { string_t text; }
%node ToC Element = { string_t text; }
%node LoF Element = { string_t text; }
%node LoT Element = { string_t text; }
%node DepthParam Element = { string_t text; }
%node SpacingParam Element = { string_t text; }

%node Figure Element = {
    FigureParams* params;
    string_t fig_name;
}

%node Table Element = {
    string_t params;
    string_t content;
}

%node List Element = {
    string_t params;
    string_t content;
}

%node MultipleFigures Element = {
    string_t caption;
    string_t fig_position;
    MultipleFiguresParams* multipleFiguresParams;
    MultipleFiguresLabel* multipleFiguresLabel;
}

%node PageNumberingAsSet Element = {
    string_t text;
    string_t number;
}

%node DefaultCoverPage Element = {
    string_t cover;
    ParamsLevel2* paramslevel2;
}

%node ReportCoverPage Element = {
    string_t cover;
    ParamsLevel2* paramslevel2;
}

%node ComplexToc Element = {
    string_t text;
    TocParams* tocParams;        
}

%node NewPage Element

%operation %virtual string_t genLatex(AstNode *this);

genLatex(LatexClass) {
    latexclass_exist = !latexclass_exist;
    headcode += Code::documentClass(text);
    return code;
}

genLatex(Numbered) {
    text = Code::Logic::trim(text);
    if (text.compare("yes") == 0)
        is_numbered = true;
    else if (text != "no")
        Code::Colored::warningDefaultValue("numbered");
    return code;
}

genLatex(PageNumbering) {
    // gobble, arabic, roman, Roman, alph, Alph
    return Code::pagenumbering(text);
}

genLatex(ToC) {
    text = Code::Logic::trim(text);
    if (text.compare("yes") == 0)
        return Code::toc();
    return code;
}

genLatex(LoF) {
    text = Code::Logic::trim(text);
    if (text.compare("yes") == 0)
        return Code::lof();
    return code;
}

genLatex(LoT) {
    text = Code::Logic::trim(text);
    if (text.compare("yes") == 0)
        return Code::lot();
    return code;
}

genLatex(PageNumberingAsSet) {
    return Code::pagenumberingAsSet(text, number);
}

genLatex(BlockElement) {
    string_t singlehead = Code::documentClass();
    string_t begin_document = Code::beginDocument();
    for (const auto elmt : elements)
        code += elmt->genLatex();
    code += Code::endDocument();
    code = latexclass_exist? headcode + package.packsCode() + preamble.getCode() + begin_document + code 
                    : singlehead + package.packsCode() + preamble.getCode() + begin_document + code;
    return code;
}

genLatex(Section) {
    return Code::section(text, is_numbered);
}

genLatex(SubSection) {
    return Code::subsection(text, is_numbered);
}

genLatex(SubSubSection) {;
    return Code::subsubsection(text, is_numbered);
}

genLatex(Paragraph) {
    return Code::paragraph(text);
}

genLatex(SubParagraph) {
    return Code::subparagraph(text);
}

genLatex(PlainText) {
    return Code::plainText(text);
}

genLatex(NewPage) {
    return Code::newPage();
}

genLatex(ParamsLevel1) {
    for (const auto elmt : elmtsl1)
        code += elmt->genLatex();
    return code;
}

genLatex(ParamsLevel2) {
    for (const auto elmt : elmtsl2)
        code += elmt->genLatex();
    return code;
}

genLatex(FigureParams) {
    /* no hace nada
    todo se hace en la clase Figure */
    return code;
}

genLatex(MultipleFiguresParams) {
    /* no hace nada
    todo se hace en la clase Figure */
    return code;
}

genLatex(MultipleFiguresLabel) {
    /* no hace nada todo se hace en la clase Figure */
    return code;
}

genLatex(DefaultCoverPage) {
    code += paramslevel2->genLatex();
    
    if (cover == "default")
        code += Code::maketitle();
    return code;
}

genLatex(ReportCoverPage) {
    is_reportcover = true;
    code += Code::beginTitlePage();
    code += Code::centering();
    code += paramslevel2->genLatex();
    code += Code::endTitlePage();
    return code;
}

genLatex(TitleParamL2) {
    if (is_reportcover)
        return Code::reportCoverTitle(text);
    return Code::defaultCoverTitle(text);
}

genLatex(DateParamL2) {
    string_t str_date = (text == "today") ? "\\today" : text;
    if (is_reportcover)
        return Code::reportCoverDate(str_date);
    return Code::defaultCoverDate(str_date);
}

genLatex(AuthorParamL2) {
    if (is_reportcover)
        return Code::reportCoverAuthor(text);
    return Code::defaultCoverAuthor(text);
}

genLatex(InstitutionParamL2) {
    if (is_reportcover)
        return Code::reportCoverInstitution(text);
    return code;
}

genLatex(SubjectParamL2) {
    if (is_reportcover)
        return Code::reportCoverSubject(text);
    return code;
}

genLatex(PlaceParamL2) {
    if (is_reportcover)
        return Code::reportCoverPlace(text);
    return code;
}

genLatex(LogoParamL2) {
    package.add(Package::Graphicx);
    if (is_reportcover)
        return Code::reportCoverLogo(text);
    return Code::defaultCoverLogo(text);
}

genLatex(Figure) {
    package.add(Package::Graphicx);
    return Code::singleFigureEnvironment(params->figureParams, fig_name);
}

genLatex(Table) {
    code += Code::table(params, content); 
    if (use_siunitx) {
        package.add(Package::Siunitx);
        preamble.code.insert({
            Preamble::Siunitx, 
            "\\sisetup{\n\tround-mode = places,\n\tround-precision = 2\n}\n\n"
        });
        preamble.add(Preamble::Siunitx);
    }

    if (use_booktabs) package.add(Package::Booktabs);
    if (use_xcolor) package.add(Package::Xcolor);
    if (use_colortbl) package.add(Package::Colortbl);
    if (use_pgfplotstable) package.add(Package::Pgfplotstable);
    return code;
}

genLatex(List) {
    code += Code::list(params, content);
    if (use_enumitem) package.add(Package::Enumitem);
    if (use_amssymb) package.add(Package::Amssymb);
    if (use_pifont) {
        package.add(Package::Pifont);
        preamble.code.insert({
            Preamble::ToDoList,
            "%% todolist --> variant of: Joe Corneli\n"
            "%% https://tex.stackexchange.com/questions/247681/how-to-create-checkbox-todo-list\n"
            "\\newlist{todolist}{itemize}{1}\n"
            "\\newcommand{\\done}{\\rlap{$\\square$}{\\large\\hspace{1pt}\\ding{51}}\\hspace{-2.5pt}}\n"
            "\\newcommand{\\undone}{\\rlap{$\\square$}{\\large\\hspace{1pt}\\ding{55}}}\n\n"
        });
        preamble.add(Preamble::ToDoList);
    } 
    return code;
}

genLatex(MultipleFigures) {
    package.add(Package::Graphicx);
    package.add(Package::Subfigure);
    MultipleFiguresVector mfv = multipleFiguresParams->mfv;
    StringVector mfl = multipleFiguresLabel->mfl;

    code += Code::beginFigure();
    code += (fig_position == "")? "[ht!]\n": "[" + Code::Logic::options(fig_position) + "]\n";
    code += Code::centering();

    for (auto i = 0; i < mfv.size(); i++)
        code += Code::multipleFigureEnvironment(mfv[i]->figureParams, mfl[i]);

    code += Code::caption(caption);
    code += Code::endFigure();
    return code;
}

genLatex(TocParams) {
    string_t depth_code = "";

    for (const auto elmt : params) {
        if (elmt->isA(DepthParam_kind))
            depth_code = elmt->genLatex();
        else
            code += elmt->genLatex();
    }
    return depth_code + code;
}

genLatex(ComplexToc) {
    return tocParams->genLatex();
}

genLatex(DepthParam) {
    text = Code::Logic::trim(text);
    auto depth = atoi(text.c_str());

    switch(depth) {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
            return Code::tocDepthParam(depth);
        default:
            Code::Colored::warningDefaultValue("depth");
            return Code::tocDepthParam(3);
    }
    return code;
}

genLatex(SpacingParam) {
    package.add(Package::Setspace);
    text = Code::Logic::trim(text);

    // single, onehalf, double
    return Code::tocSpacingParam(text);
}