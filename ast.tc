%option lang = "C++"
%option namespace = "Ast"

%decls %{
    #include <iostream>
    #include <vector>

    using string_t = std::string;

    namespace Ast {
        class AstNode;
        using ElementVector = std::vector<AstNode *>;
    }    
%}

%{
    #include "ast.h"
    #include "gen_latex.h"

    string_t headcode;
    bool latexclass_exist = false;
    bool is_numbered = false;
    bool is_reportcover = false;

    struct Package package;
    struct Color color;
%}

%node AstNode %abstract %typedef = {
    %nocreate string_t code;
}

%node Element AstNode %abstract

%node BlockElement Element = {
    ElementVector elements;
}

%node ParamsLevel1 Element = {
    ElementVector elmtsl1;
}

%node ParamsLevel2 Element = {
    ElementVector elmtsl2;
}

%node LatexClass Element = { string_t text; }
%node Numbered Element = { string_t text; }
%node PageNumbering Element = { string_t text; }
%node Section Element = { string_t text;}
%node SubSection Element = { string_t text; }
%node SubSubSection Element = { string_t text; }
%node Paragraph Element = { string_t text; }
%node SubParagraph Element = { string_t text; }
%node PlainText Element = { string_t text; }
%node TitleParamL2 Element = { string_t text; }
%node DateParamL2 Element = { string_t text; }
%node AuthorParamL2 Element = { string_t text; }
%node InstitutionParamL2 Element = { string_t text; }
%node SubjectParamL2 Element = { string_t text; }
%node PlaceParamL2 Element = { string_t text; }
%node LogoParamL2 Element = { string_t text; }

%node PageNumberingAsSet Element = {
    string_t text;
    string_t number;
}

%node DefaultCoverPage Element = {
    string_t cover;
    ParamsLevel2* paramslevel2;
}

%node ReportCoverPage Element = {
    string_t cover;
    ParamsLevel2* paramslevel2;
}

%node NewPage Element

%operation %virtual string_t genLatex(AstNode *this);

genLatex(LatexClass) {
    latexclass_exist = !latexclass_exist;
    headcode += Code::documentClass(text);
    return code;
}

genLatex(Numbered) {
    if (text[0] == 'y' && text[1] == 'e' && text[2] == 's')
        is_numbered = true;
    else if (text != "no")
        std::cout << "The " << 
                color.open(Color::BrightYellow) << "numbered" << color.close() <<
                " parameter will take the default value" << std::endl;
    return code;
}

genLatex(PageNumbering) {
    // gobble, arabic, roman, Roman, alph, Alph
    return Code::pagenumbering(text);
}

genLatex(PageNumberingAsSet) {
    return Code::pagenumberingAsSet(text, number);
}

genLatex(BlockElement) {
    string_t singlehead = Code::documentClass();
    string_t begin_document = Code::beginDocument();
    for (const auto elmt : elements)
        code += elmt->genLatex();
    code += Code::endDocument();
    code = latexclass_exist? headcode + package.packsCode() + begin_document + code 
                    : singlehead + package.packsCode() + begin_document + code;
    return code;
}

genLatex(Section) {
    return Code::section(text, is_numbered);
}

genLatex(SubSection) {
    return Code::subsection(text, is_numbered);
}

genLatex(SubSubSection) {;
    return Code::subsubsection(text, is_numbered);
}

genLatex(Paragraph) {
    return Code::paragraph(text);
}

genLatex(SubParagraph) {
    return Code::subparagraph(text);
}

genLatex(PlainText) {
    return Code::plainText(text);
}

genLatex(NewPage) {
    return Code::newPage();
}

genLatex(ParamsLevel1) {
    for (const auto elmt : elmtsl1)
        code += elmt->genLatex();
    return code;
}

genLatex(ParamsLevel2) {
    for (const auto elmt : elmtsl2)
        code += elmt->genLatex();
    return code;
}

genLatex(DefaultCoverPage) {
    code += paramslevel2->genLatex();
    
    if (cover == "default")
        code += Code::maketitle();
    return code;
}

genLatex(ReportCoverPage) {
    is_reportcover = true;
    code += Code::beginTitlePage();
    code += Code::centering();
    code += paramslevel2->genLatex();
    code += Code::endTitlePage();
    return code;
}

genLatex(TitleParamL2) {
    if (is_reportcover)
        return Code::reportCoverTitle(text);
    return Code::defaultCoverTitle(text);
}

genLatex(DateParamL2) {
    string_t str_date = (text == "today") ? "\\today" : text;
    if (is_reportcover)
        return Code::reportCoverDate(str_date);
    return Code::defaultCoverDate(str_date);
}

genLatex(AuthorParamL2) {
    if (is_reportcover)
        return Code::reportCoverAuthor(text);
    return Code::defaultCoverAuthor(text);
}

genLatex(InstitutionParamL2) {
    if (is_reportcover)
        return Code::reportCoverInstitution(text);
    return code;
}

genLatex(SubjectParamL2) {
    if (is_reportcover)
        return Code::reportCoverSubject(text);
    return code;
}

genLatex(PlaceParamL2) {
    if (is_reportcover)
        return Code::reportCoverPlace(text);
    return code;
}

genLatex(LogoParamL2) {
    if (is_reportcover) {
        package.add(Package::Graphicx);
        return Code::reportCoverLogo(text);
    }
    return code;
}
